@main(cond: bool) {
  cond.exit: bool = undef;
  a.exit: int = undef;
  a.right.1: int = undef;
  cond.right: bool = undef;
  a.right: int = undef;
  a.left.1: int = undef;
  cond.left: bool = undef;
  a.left: int = undef;
  a.entry.1: int = undef;
  cond.entry: bool = undef;
  a.entry: int = undef;
  a: int = undef;
  set cond.b1 cond;
  set a.b1 a;
  set a.entry.b1 a.entry;
  set cond.entry.b1 cond.entry;
  set a.entry.1.b1 a.entry.1;
  set a.left.b1 a.left;
  set cond.left.b1 cond.left;
  set a.left.1.b1 a.left.1;
  set a.right.b1 a.right;
  set cond.right.b1 cond.right;
  set a.right.1.b1 a.right.1;
  set a.exit.b1 a.exit;
  set cond.exit.b1 cond.exit;
.b1:
  cond.exit.b1: bool = get;
  a.exit.b1: int = get;
  a.right.1.b1: int = get;
  cond.right.b1: bool = get;
  a.right.b1: int = get;
  a.left.1.b1: int = get;
  cond.left.b1: bool = get;
  a.left.b1: int = get;
  a.entry.1.b1: int = get;
  cond.entry.b1: bool = get;
  a.entry.b1: int = get;
  a.b1: int = get;
  cond.b1: bool = get;
  a.b1.1: int = undef;
  set cond.entry.b1 cond.b1;
  set a.entry.b1 a.b1.1;
  set cond.entry cond.b1;
  set a.entry a.b1.1;
  set a.entry.entry a.entry.b1;
  set cond.entry.entry cond.entry.b1;
  set a.entry.1.entry a.entry.1.b1;
  set a.left.entry a.left.b1;
  set cond.left.entry cond.left.b1;
  set a.left.1.entry a.left.1.b1;
  set a.right.entry a.right.b1;
  set cond.right.entry cond.right.b1;
  set a.right.1.entry a.right.1.b1;
  set a.exit.entry a.exit.b1;
  set cond.exit.entry cond.exit.b1;
  jmp .entry;
.entry:
  cond.exit.entry: bool = get;
  a.exit.entry: int = get;
  a.right.1.entry: int = get;
  cond.right.entry: bool = get;
  a.right.entry: int = get;
  a.left.1.entry: int = get;
  cond.left.entry: bool = get;
  a.left.entry: int = get;
  a.entry.1.entry: int = get;
  cond.entry.entry: bool = get;
  a.entry.entry: int = get;
  a.entry: int = get;
  cond.entry: bool = get;
  a.entry.entry.1: int = get;
  cond.entry.entry.1: bool = get;
  a.entry.1.entry.1: int = const 47;
  set cond.left.entry cond.entry.entry.1;
  set a.left.entry a.entry.1.entry.1;
  set cond.right.entry cond.entry.entry.1;
  set a.right.entry a.entry.1.entry.1;
  set cond.left cond.entry;
  set a.left a.entry;
  set a.entry.left a.entry.entry.1;
  set cond.entry.left cond.entry.entry.1;
  set a.entry.1.left a.entry.1.entry.1;
  set a.left.left a.left.entry;
  set cond.left.left cond.left.entry;
  set a.left.1.left a.left.1.entry;
  set a.right.left a.right.entry;
  set cond.right.left cond.right.entry;
  set a.right.1.left a.right.1.entry;
  set a.exit.left a.exit.entry;
  set cond.exit.left cond.exit.entry;
  set cond.right cond.entry;
  set a.right a.entry;
  set a.entry.right a.entry.entry.1;
  set cond.entry.right cond.entry.entry.1;
  set a.entry.1.right a.entry.1.entry.1;
  set a.left.right a.left.entry;
  set cond.left.right cond.left.entry;
  set a.left.1.right a.left.1.entry;
  set a.right.right a.right.entry;
  set cond.right.right cond.right.entry;
  set a.right.1.right a.right.1.entry;
  set a.exit.right a.exit.entry;
  set cond.exit.right cond.exit.entry;
  br cond.entry.entry.1 .left .right;
.left:
  cond.exit.left: bool = get;
  a.exit.left: int = get;
  a.right.1.left: int = get;
  cond.right.left: bool = get;
  a.right.left: int = get;
  a.left.1.left: int = get;
  cond.left.left: bool = get;
  a.left.left: int = get;
  a.entry.1.left: int = get;
  cond.entry.left: bool = get;
  a.entry.left: int = get;
  a.left: int = get;
  cond.left: bool = get;
  a.left.left.1: int = get;
  cond.left.left.1: bool = get;
  a.left.1.left.1: int = add a.left.left.1 a.left.left.1;
  set cond.exit.left cond.left.left.1;
  set a.exit.left a.left.1.left.1;
  set cond.exit cond.left;
  set a.exit a.left;
  set a.entry.exit a.entry.left;
  set cond.entry.exit cond.entry.left;
  set a.entry.1.exit a.entry.1.left;
  set a.left.exit a.left.left.1;
  set cond.left.exit cond.left.left.1;
  set a.left.1.exit a.left.1.left.1;
  set a.right.exit a.right.left;
  set cond.right.exit cond.right.left;
  set a.right.1.exit a.right.1.left;
  set a.exit.exit a.exit.left;
  set cond.exit.exit cond.exit.left;
  jmp .exit;
.right:
  cond.exit.right: bool = get;
  a.exit.right: int = get;
  a.right.1.right: int = get;
  cond.right.right: bool = get;
  a.right.right: int = get;
  a.left.1.right: int = get;
  cond.left.right: bool = get;
  a.left.right: int = get;
  a.entry.1.right: int = get;
  cond.entry.right: bool = get;
  a.entry.right: int = get;
  a.right: int = get;
  cond.right: bool = get;
  a.right.right.1: int = get;
  cond.right.right.1: bool = get;
  a.right.1.right.1: int = mul a.right.right.1 a.right.right.1;
  set cond.exit.right cond.right.right.1;
  set a.exit.right a.right.1.right.1;
  set cond.exit cond.right;
  set a.exit a.right;
  set a.entry.exit a.entry.right;
  set cond.entry.exit cond.entry.right;
  set a.entry.1.exit a.entry.1.right;
  set a.left.exit a.left.right;
  set cond.left.exit cond.left.right;
  set a.left.1.exit a.left.1.right;
  set a.right.exit a.right.right.1;
  set cond.right.exit cond.right.right.1;
  set a.right.1.exit a.right.1.right.1;
  set a.exit.exit a.exit.right;
  set cond.exit.exit cond.exit.right;
  jmp .exit;
.exit:
  cond.exit.exit: bool = get;
  a.exit.exit: int = get;
  a.right.1.exit: int = get;
  cond.right.exit: bool = get;
  a.right.exit: int = get;
  a.left.1.exit: int = get;
  cond.left.exit: bool = get;
  a.left.exit: int = get;
  a.entry.1.exit: int = get;
  cond.entry.exit: bool = get;
  a.entry.exit: int = get;
  a.exit: int = get;
  cond.exit: bool = get;
  a.exit.exit.1: int = get;
  cond.exit.exit.1: bool = get;
  print a.exit.exit.1;
  ret;
}
